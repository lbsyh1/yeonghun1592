```

import { useState } from "react";
function App() {
  const [toDo, setToDo] = useState("");
  const [toDos, setToDos] = useState([]);
  const onChange = (event) => setToDo(event.target.value);
  const onSubmit = (event) => {
    event.preventDefault();
    if (toDo === "") {//1.todo가 공백이면 함수종료, 공백이 아니면 currentArray에 추가 그 후 todo를 공백으로 전환한다
      return;
    }
    setToDos((currentArray) => [toDo, ...currentArray]);//함수의 함수값(실행결과)을 저장한다
    setToDo("");
  };
//input에 입력할때마다 toDo가 바뀌는데 저장은 submit눌러야
toDos에 추가된다
  
   return (
    <div>
      <h1>My To Dos ({toDos.length})</h1>//h1 태그에 todo목록에 추가한 갯수
      <form onSubmit={onSubmit}>//2.form 제출되면 onSubmit함수가 실행되게 라고 하지말고 todo가 공백이면 함수종료, 공백이 아니면 currentArray에 추가 그 후 todo를 공백으로 전환하는 
      함수가 실행되게
        <input
          onChange={onChange}//input창에 변화가 생기면 3.onChange함수가 실행되게 라고하지말고 toDo에 이벤트가 일어나는 곳의 값이 저장되는 함수가 실행되게 라고
          value={toDo}//input창 값에 toDo가 표시되게
          type="text"
          placeholder="Write your to do..."
        />
        <button>Add To Do</button>
      </form>
      <hr />
      <ul>
        {toDos.map((item, index) => (
          <li key={index}>{item}</li>//4.todos의 모든 요소를 요소가 들어있는 리스트로 만드는 코드
        ))}
      </ul>
    </div>
  );
}

```

문제1..todo가 공백이면 함수종료, 공백이 아니면 currentArray에 추가 그 후 todo를 공백으로 전환한다
문제2.form 제출되면 onSubmit함수가 실행되게 라고 하지말고 todo가 공백이면 함수종료, 공백이 아니면 currentArray에 추가 그 후 todo를 공백으로 전환하는 
      함수가 실행되게
문제3.input창에 변화가 생기면 onChange함수가 실행되게 라고하지말고 toDo에 이벤트가 일어나는 곳의 값이 저장되는 함수가 실행되게 라고
          value={toDo}//input창 값에 toDo가 표시되게
문제4.todos의 모든 요소를 요소가 들어있는 리스트로 만드는 코드
문제5.todoList
1.todo입력한것을 저장한다
2.저장한 todo들을 ui로 보여준다

event가 발생하면 event객체가 생성된다
target은 event객체의 프로퍼티다

```

import { useState } from "react";
function App() {
  const [toDo, setToDo] = useState("");
  const [toDos, setToDos] = useState([]);
  const onChange = (event) => setToDo(event.target.value);
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
버블링
버블링(bubbling)의 원리는 간단합니다.

한 요소에 이벤트가 발생하면, 이 요소에 할당된 핸들러가 동작하고, 이어서 부모 요소의 핸들러가 동작합니다. 가장 최상단의 조상 요소를 만날 때까지 이 과정이 반복되면서 요소 각각에 할당된 핸들러가 동작합니다.

```

<form onclick="alert('form')">FORM
  <div onclick="alert('div')">DIV
    <p onclick="alert('p')">P</p>
  </div>
</form>

```

<p>에 할당된 onclick 핸들러가 동작합니다.
바깥의 <div>에 할당된 핸들러가 동작합니다.
그 바깥의 <form>에 할당된 핸들러가 동작합니다.
document 객체를 만날 때까지, 각 요소에 할당된 onclick 핸들러가 동작합니다.

event.target
부모 요소의 핸들러는 이벤트가 정확히 어디서 발생했는지 등에 대한 자세한 정보를 얻을 수 있습니다.

이벤트가 발생한 가장 안쪽의 요소는 타깃(target) 요소라고 불리고, event.target을 사용해 접근할 수 있습니다.

event.target과 this(=event.currentTarget)는 다음과 같은 차이점이 있습니다.

event.target은 실제 이벤트가 시작된 ‘타깃’ 요소입니다. 버블링이 진행되어도 변하지 않습니다.
this는 ‘현재’ 요소로, 현재 실행 중인 핸들러가 할당된 요소를 참조합니다.
예시를 살펴봅시다. 핸들러는 form.onclick 하나밖에 없지만 이 핸들러에서 폼 안의 모든 요소에서 발생하는 클릭 이벤트를 ‘잡아내고(catch)’ 있습니다. 클릭 이벤트가 어디서 발생했든 상관없이 <form> 요소까지 이벤트가 버블링 되어 핸들러를 실행시키기 때문입니다.

form.onclick 핸들러 내의 this와 event.target은 다음과 같습니다.

this(event.currentTarget) – <form> 요소에 있는 핸들러가 동작했기 때문에 <form> 요소를 가리킵니다.
event.target – 폼 안쪽에 실제 클릭한 요소를 가리킵니다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

  const onSubmit = (event) => {
    event.preventDefault();
    
    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    브라우저 기본 동작 막기
브라우저 기본 동작을 취소할 수 있는 방법은 두 가지가 있습니다.

첫 번째 방법은 event 객체를 사용하는 것입니다. 이때 event 객체에 구현된 event.preventDefault() 메서드를 사용합니다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    setToDos((currentArray) => [toDo, ...currentArray]);//함수의 함수값(실행결과)을 저장한다
    setToDo("");
  };
 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 구조 분해 할당 구문은 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 JavaScript 표현식입니다.
 
 let a, b, rest;
[a, b] = [10, 20];

console.log(a);
// expected output: 10

console.log(b);
// expected output: 20

[a, b, ...rest] = [10, 20, 30, 40, 50];

변수에 배열의 나머지를 할당하기
배열을 구조 분해할 경우, 나머지 구문을 이용해 분해하고 남은 부분을 하나의 변수에 할당할 수 있습니다.

var [a, ...b] = [1, 2, 3];
console.log(a); // 1
console.log(b); // [2, 3]


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
   return (
    <div>
      <h1>My To Dos ({toDos.length})</h1>//h1 태그에 todo목록에 추가한 갯수
      <form onSubmit={onSubmit}>//2.form 제출되면 onSubmit함수가 실행되게 라고 하지말고 todo가 공백이면 함수종료, 공백이 아니면 currentArray에 추가 그 후 todo를 공백으로 전환하는 
      함수가 실행되게
        <input
          onChange={onChange}//input창에 변화가 생기면 3.onChange함수가 실행되게 라고하지말고 toDo에 이벤트가 일어나는 곳의 값이 저장되는 함수가 실행되게 라고
          value={toDo}//input창 값에 toDo가 표시되게
          type="text"
          placeholder="Write your to do..."
        />
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        - input 태그는 form태그 안에서 사용되는 입력 태그 중에서 가장 중요하면서 많이 사용되는 태그입니다. 그래서 종류 또한 매우 다양합니다. input 태그의 종류를 다루는 것은 type 속성을 이용해서 다룹니다. form 태그 내에 존재해야 입력 데이터를 전송할 수 있습니다. 서버에 전송되는 데이터는 name 속성을 키로, value 속성을 값으로 하여 key=value의 형태로 전송이 됩니다
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        <button>Add To Do</button>
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        button에서 submit이벤트가 발생했을때 이벤트 버블링을 통해 form태그에 전달된다 form에서 onSubmit핸들러 실행
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
      </form>
      <hr />
      <ul>
        {toDos.map((item, index) => (
          <li key={index}>{item}</li>//4.todos의 모든 요소를 요소가 들어있는 리스트로 만드는 코드
        ))}
      </ul>
    </div>
  );
}

```
